# Target config for Nuvoton NuMicro Mini51 series chips

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME mini51
}

if { [info exists CPUTAPID] } {
    set _CPUTAPID $CPUTAPID
} else {
    set _CPUTAPID 0x0bb11477
}

swd newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian little -chain-position $_TARGETNAME

set _FLASHNAME $_CHIPNAME.flash_aprom
flash bank $_FLASHNAME mini51 0x00000000 0x4000 0 0 $_TARGETNAME
set _FLASHNAME $_CHIPNAME.flash_ldrom
flash bank $_FLASHNAME mini51 0x00100000 0x0800 0 0 $_TARGETNAME
set _FLASHNAME $_CHIPNAME.flash_conf
flash bank $_FLASHNAME mini51 0x00300000 0x0100 0 0 $_TARGETNAME

adapter_khz 1000
reset_config none


# workaround to force target to halt on reset
# TODO: debug why "cortex_m reset_config sysresetreq" does not work

$_CHIPNAME.cpu configure -event reset-assert mini51_reset_assert

# variable to store requested reset mode to use in mini51_reset_assert
set mini51_reset_mode ""

proc init_reset { mode } {
    global mini51_reset_mode
    global _TARGETNAME

    set mini51_reset_mode $mode

    if { [string compare [$_TARGETNAME curstate] "halted"] == 0 } {
        # cpu needs to be running to detect halt
        resume
    }
}

proc mini51_reset_assert {} {
    global mini51_reset_mode

    halt

    if { [string compare $mini51_reset_mode "run"] == 0 } {
        # do not stop cpu after reset
        cortex_m vector_catch none
    } else {
        # stop cpu after reset using reset vector
        cortex_m vector_catch reset
    }

    # Trigger reset using sysresetreq
    mww 0xE000ED0C 0x05FA0004
}

